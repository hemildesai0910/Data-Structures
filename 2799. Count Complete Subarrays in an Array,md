# 📊 [2799. Count Complete Subarrays in an Array](https://leetcode.com/problems/count-complete-subarrays-in-an-array/)

## 📜 Problem Statement

You are given an array `nums` consisting of **positive integers**.

A subarray of `nums` is called **complete** if the number of **distinct elements in the subarray** is equal to the number of **distinct elements in the entire array**.

Return the **number of complete subarrays** in `nums`.

> A subarray is a contiguous, non-empty part of the array.

---

## 🔍 Examples

### Example 1:

**Input:**  
`nums = [1, 3, 1, 2, 2]`

**Output:**  
`4`

**Explanation:**  
The complete subarrays are:
- `[1, 3, 1, 2]`
- `[1, 3, 1, 2, 2]`
- `[3, 1, 2]`
- `[3, 1, 2, 2]`

---

### Example 2:

**Input:**  
`nums = [5, 5, 5, 5]`

**Output:**  
`10`

**Explanation:**  
Only one unique element → any subarray is complete.  
Total subarrays = `n(n + 1)/2 = 4 * 5 / 2 = 10`.

---

## 💡 Approach

1. First, compute the total number of **distinct elements** in the whole array using a set.
2. Use a sliding window:
   - Expand the window from `j = 0` to `n`.
   - For each valid window where distinct elements match the total:
     - Count all possible subarrays ending from `j` to `n-1` as complete.
   - Shrink the window from the left when condition is met to look for next possible subarray.
3. Continue until the full array is scanned.

---

## 👨‍💻 Code Implementation (C++)

```cpp
class Solution {
public:
    int countCompleteSubarrays(vector<int>& nums) {
        int n = nums.size();

        // Set to count total distinct elements
        unordered_set<int> st(begin(nums), end(nums));
        int c = st.size();  // total distinct count

        int i = 0, j = 0, res = 0;
        unordered_map<int, int> mp;

        while (j < n) {
            mp[nums[j]]++;

            // While the window is valid (complete subarray)
            while (mp.size() == c) {
                res += (n - j);  // all subarrays starting at i, ending from j to n-1

                mp[nums[i]]--;
                if (mp[nums[i]] == 0) {
                    mp.erase(nums[i]);
                }
                i++;
            }
            j++;
        }

        return res;
    }
};
